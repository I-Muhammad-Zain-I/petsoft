// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// enum UserRole {
//   ADMIN
//   USER
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String                 @id @default(uuid())
  name                    String?
  email                   String                 @unique
  emailVerified           DateTime?
  image                   String?
  role                    String                 @default("USER")
  accounts                Account[]
  pets                    Pet[]
  hasCompletedPayment     Boolean                @default(false)
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  twoFactorConfirmationId String?
  hashedPassword          String?
  updatedAt               DateTime               @updatedAt
  createdAt               DateTime               @default(now())
}

model Pet {
  id        String   @id @default(uuid())
  name      String
  ownerName String
  imageUrl  String
  imageId   String?
  age       Int
  notes     String
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
